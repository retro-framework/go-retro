package projections

import (
	"context"
	"encoding/json"
	"fmt"
	"html/template"
	"net/http"
	"time"

	"github.com/go-redis/redis"

	"github.com/retro-framework/go-retro/events"
	"github.com/retro-framework/go-retro/framework/depot"
	"github.com/retro-framework/go-retro/framework/retro"
)

type Profile struct {
	Name      string       `json:"name"`
	AvatarSrc template.URL `json:"avatarSrc"`

	Created time.Time `json:"created"`
	Updated time.Time `json:"updated"`

	Hash string    `json:"hash"`
	URN  retro.URN `json:"urn"`
}

type Profiles interface {
	Get(context.Context, retro.URN) (Profile, error)
}

func NewProfiles(c *redis.Client, evManifest retro.EventManifest, d retro.Depot) redisProfiles {
	return redisProfiles{c, evManifest, d}
}

type redisProfiles struct {
	client     *redis.Client
	evManifest retro.EventManifest
	d          retro.Depot
}

func (rp redisProfiles) Get(ctx context.Context, pn retro.URN) (Profile, error) {

	var name = rp.client.HGet(pn.String(), "name")
	if name.Err() != nil {
		return Profile{}, name.Err()
	}

	var avatar = rp.client.HGet(pn.String(), "avatar")
	if avatar.Err() != nil {
		return Profile{}, name.Err()
	}

	var avatarMime = rp.client.HGet(pn.String(), "avatar_mime")
	if avatarMime.Err() != nil {
		return Profile{}, name.Err()
	}

	avatarURL := template.URL("data:" + avatarMime.Val() + ";base64," + avatar.Val())

	return Profile{
		Name:      name.Val(),
		AvatarSrc: avatarURL,
		URN:       retro.URN("urn:" + pn.String()),
	}, nil
}

func (rp redisProfiles) Run(ctx context.Context) {

	var identities = rp.d.Watch(ctx, "identity/*")

	for {
		identityEvents, err := identities.Next(ctx)
		if err == depot.Done {
			continue
		}
		if err != nil {
			fmt.Println("err on pi", err)
			return
		}
		if identityEvents != nil {
			go func(evIter retro.EventIterator) {
				var profile = Profile{}
				for {
					var pEv, err = evIter.Next(ctx)
					if err == depot.Done {
						continue
					}
					if err != nil {
						fmt.Println("es-listings: err", err)
						return
					}
					if pEv != nil {

						if profile.Created.IsZero() {
							profile.Created = pEv.Time()
						}

						profile.Updated = pEv.Time()

						profile.Hash = pEv.CheckpointHash().String()

						ev, err := rp.evManifest.ForName(pEv.Name())
						if err != nil {
							fmt.Println("err looking up event", err)
							continue
						}

						err = json.Unmarshal(pEv.Bytes(), &ev)
						if err != nil {
							fmt.Println("err unmarshalling event", err)
							continue
						}

						rp.client.SAdd("profiles", pEv.PartitionName())

						switch tEv := ev.(type) {
						case *events.SetDisplayName:
							rp.client.HSet(string(pEv.PartitionName()), "name", tEv.Name)
						case *events.SetAvatar:
							rp.client.HSet(string(pEv.PartitionName()), "avatar", ``)
							rp.client.HSet(string(pEv.PartitionName()), "avatar_mime", http.DetectContentType(tEv.ImgData))
						case *events.SetVisibility:
							if tEv.Radius == "public" {
								rp.client.SAdd("profiles-public", pEv.PartitionName())
							}
						default:
							// fmt.Printf("not sure what to do with %#v\n", tEv)
						}
					}
				}
			}(identityEvents)
		}
	}
}
