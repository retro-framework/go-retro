package types

import (
	"context"
	"io"
)

// Depot is a general storage interface for application related data. The
// name is chosen to draw parallels with the Repository concept sometimes
// used in CQRS/Event Sourcing applications.
//
// The name is chosen because in Retro the Depot also stores metrics about
// the commands themselves, as well as performance information, not simply
// the Events generated by commands.
type Depot interface {

	// For enumerating or matching on a single PartitionName
	Watch(context.Context, string) PartitionIterator

	// General variadaric function for storing any packed things
	// simplifies the interface to the underlying store.
	StorePacked(...HashedObject) error

	// Head pointer operations are important for the engine
	// to be able to do things without mangling the history
	HeadPointer(context.Context) (Hash, error)
	MoveHeadPointer(old, new Hash) error
}

// DumpableDepot is an optional interface which implements
// a single method which dumps the contents as preformatted
// text to facilitate easy debugging. It is mostly used in
// integration tests.
type DumpableDepot interface {
	DumpAll(w io.Writer) string
}
